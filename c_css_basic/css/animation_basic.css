@charset "UTF-8";
.ani_one{width:100%; min-width:1200px; height:200px; padding:0.5rem; background-color:#fdc; border:2px solid #333;}
.ani_one>.test{width:200px; height:200px; border-radius:100%; background-color:#5cf; text-align:center; line-height:200px;
               transform:translate(-250px);
               /* animation-name:rotateball;
               animation-duration:3000ms;
               animation-timing-function:ease;
               animation-iteration-count: infinite;
               animation-direction:alternate; */

               animation:rotateball 3000ms infinite;
              }/* 지연시간은 alternate뒤에 쓴다 */

              /* @-webkit-keyframes rotateball{}
              @-moz-keyframes rotateball{}
              @-o-keyframes rotateball{} */

          /* .test:hover{animation-play-state:} */

              @keyframes rotateball{
                0%{background-color:#f05;}
                50%{color:#fff; font-weight:bold; transform:translate(20vw, -100px) rotate(360deg);}
                100%{transform:translate(100vw) rotate(720deg);}
              }

  .myani{width:20px; height:20px; border-radius:100%; background-color:#333; animation:rotateball 500ms infinite alternate-reverse;}




 /* animation
 animation-name : 애니메이션 기능을 수행할 이름을 만드는 곳
 animation-duration : 한번의 흐름에 대한 수행시간
 animation-timing-function : 한번의 수행에 따른 흐름의 느낌(ease, linear, ease-out....)
 animation-iteration-count : 반복수행(1번일 경우에는 1만, 10번의 경우 10, 무한반복시 infinite)
 animation-direction : 수행 전/후 (한번의 수행) 방향을 어떻게 처리할 것인가? (normal, reverse, alternate, alternate-reverse)
 animation-delay : 애니메이션의 지연시간
 animation-play-state : 움직임과 일시정지
 animation-fill-mode : 애니메이션과 전/후의 처리할 값
 */